{"version":3,"file":"eta.dev.js","sources":["../../src/err.ts","../../src/polyfills.ts","../../src/utils.ts","../../src/parse.ts","../../src/compile-string.ts","../../src/storage.ts","../../src/containers.ts","../../src/config.ts","../../src/compile.ts","../../src/render.ts"],"sourcesContent":["function setPrototypeOf(obj: any, proto: any) {\r\n  // eslint-disable-line @typescript-eslint/no-explicit-any\r\n  if (Object.setPrototypeOf) {\r\n    Object.setPrototypeOf(obj, proto)\r\n  } else {\r\n    obj.__proto__ = proto\r\n  }\r\n}\r\n\r\n// This is pretty much the only way to get nice, extended Errors\r\n// without using ES6\r\n\r\n/**\r\n * This returns a new Error with a custom prototype. Note that it's _not_ a constructor\r\n *\r\n * @param message Error message\r\n *\r\n * **Example**\r\n *\r\n * ```js\r\n * throw EtaErr(\"template not found\")\r\n * ```\r\n */\r\n\r\nexport default function EtaErr(message: string): Error {\r\n  const err = new Error(message)\r\n  setPrototypeOf(err, EtaErr.prototype)\r\n  return err\r\n}\r\n\r\nEtaErr.prototype = Object.create(Error.prototype, {\r\n  name: { value: 'Eta Error', enumerable: false }\r\n})\r\n\r\n/**\r\n * Throws an EtaErr with a nicely formatted error and message showing where in the template the error occurred.\r\n */\r\n\r\nexport function ParseErr(message: string, str: string, indx: number): void {\r\n  const whitespace = str.slice(0, indx).split(/\\n/)\r\n\r\n  const lineNo = whitespace.length\r\n  const colNo = whitespace[lineNo - 1].length + 1\r\n  message +=\r\n    ' at line ' +\r\n    lineNo +\r\n    ' col ' +\r\n    colNo +\r\n    ':\\n\\n' +\r\n    '  ' +\r\n    str.split(/\\n/)[lineNo - 1] +\r\n    '\\n' +\r\n    '  ' +\r\n    Array(colNo).join(' ') +\r\n    '^'\r\n  throw EtaErr(message)\r\n}\r\n","import EtaErr from './err'\r\n\r\n/**\r\n * @returns The global Promise function\r\n */\r\n\r\nexport const promiseImpl: PromiseConstructor = new Function('return this')().Promise\r\n\r\n/**\r\n * @returns A new AsyncFunction constuctor\r\n */\r\n\r\nexp